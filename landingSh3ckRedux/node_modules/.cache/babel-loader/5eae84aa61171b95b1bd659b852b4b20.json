{"ast":null,"code":"var _jsxFileName = \"/Users/p3rolix/code/landingSh3ckFE/src/components/contactSection/loginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport RegisterForm from './registerForm';\nimport ForgotPINForm from './forgotPINForm';\nimport { MdOutlineVisibility } from 'react-icons/md';\nimport { infoContact } from '../../utils/data';\nimport GoogleAuth3 from '../buttons/googleAuth3';\nimport GoogleAuth4 from '../buttons/googleAuth4';\nimport GoogleAuth5 from '../buttons/googleAuth5';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  email: yup.string().email('Por favor introduce una dirección de correo válida').required('hola, no te olvídes de colocar tu correo electrónico'),\n  pin: yup.string().min(4).max(4).required('No te olvides de colocar tu PIN de seguridad')\n});\n\nconst LoginForm = ({\n  // handlingLoginUser,\n  regView,\n  toggleRegView,\n  handlingSubmitUser,\n  forgotPIN,\n  handlingNewPINRequest,\n  language,\n  isSignedIn,\n  googleTest,\n  toggleForgotPINState,\n  handlingSubmitLoginUser,\n  workingSpinner\n}) => {\n  _s();\n\n  // console.log(isSignedIn)\n  const [typeOfPIN, setTypeOfPIN] = useState(false);\n\n  const onSubmit = async values => {\n    handlingSubmitLoginUser(values);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      pin: \"\"\n    },\n    validateOnBlur: true,\n    onSubmit,\n    validationSchema: validationSchema\n  }); // console.log(formik.errors)\n\n  const togglingPINVisibility = () => {\n    setTypeOfPIN(!typeOfPIN);\n  };\n\n  if (regView) {\n    return /*#__PURE__*/_jsxDEV(RegisterForm, {\n      handlingSubmitUser: handlingSubmitUser,\n      language: language,\n      isSignedIn: isSignedIn,\n      workingSpinner: workingSpinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (forgotPIN) {\n    return /*#__PURE__*/_jsxDEV(ForgotPINForm, {\n      handlingNewPINRequest: handlingNewPINRequest,\n      language: language,\n      toggleForgotPINState: toggleForgotPINState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boxContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      className: \"formContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        autoComplete: \"on\",\n        name: \"email\",\n        placeholder: language === 'ES' ? infoContact.loginFormPH1 : infoContact.loginFormPH1_EN,\n        type: \"email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        style: {\n          borderBottom: `${formik.touched.email && formik.errors.email ? '2px solid red' : '1px solid rgba(200,200,200, 0.3 )'}`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"inputPassword\",\n          name: \"pin\",\n          autoComplete: \"on\",\n          placeholder: language === 'ES' ? infoContact.loginFormPH2 : infoContact.loginFormPH2_EN,\n          type: !typeOfPIN ? 'password' : 'text',\n          value: formik.values.pin,\n          onChange: formik.handleChange,\n          onBlur: formik.handleBlur,\n          style: {\n            borderBottom: `${formik.touched.city && formik.errors.city ? '2px solid red' : '1px solid rgba(200,200,200, 0.3 )'}`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"eyeWrapper\",\n          children: /*#__PURE__*/_jsxDEV(MdOutlineVisibility, {\n            onClick: togglingPINVisibility,\n            className: \"eyeIcon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sendDataBtn\",\n        type: \"submit\",\n        children: language === 'ES' ? infoContact.loginFormSendBtn : infoContact.loginFormSendBtn_EN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleRegView,\n        className: \"regButton\",\n        type: \"submit\",\n        children: language === 'ES' ? infoContact.loginFormRegBtn : infoContact.loginFormRegBtn_EN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: toggleForgotPINState,\n        className: \"forgotPINSpan\",\n        children: language === 'ES' ? infoContact.loginFormSpan : infoContact.loginFormSpan_EN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleAuth5, {\n        isSignedIn: isSignedIn,\n        googleTest: googleTest,\n        language: language\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginForm, \"tkEf1euVfGWyWRG5Cr1yJHn+ox8=\", false, function () {\n  return [useFormik];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/p3rolix/code/landingSh3ckFE/src/components/contactSection/loginForm.js"],"names":["React","useState","useFormik","yup","RegisterForm","ForgotPINForm","MdOutlineVisibility","infoContact","GoogleAuth3","GoogleAuth4","GoogleAuth5","validationSchema","object","email","string","required","pin","min","max","LoginForm","regView","toggleRegView","handlingSubmitUser","forgotPIN","handlingNewPINRequest","language","isSignedIn","googleTest","toggleForgotPINState","handlingSubmitLoginUser","workingSpinner","typeOfPIN","setTypeOfPIN","onSubmit","values","formik","initialValues","validateOnBlur","togglingPINVisibility","handleSubmit","loginFormPH1","loginFormPH1_EN","handleChange","handleBlur","borderBottom","touched","errors","loginFormPH2","loginFormPH2_EN","city","loginFormSendBtn","loginFormSendBtn_EN","loginFormRegBtn","loginFormRegBtn_EN","loginFormSpan","loginFormSpan_EN"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup' \nimport RegisterForm from './registerForm'\nimport ForgotPINForm from './forgotPINForm'\nimport {MdOutlineVisibility} from 'react-icons/md'\nimport { infoContact } from '../../utils/data'\nimport GoogleAuth3 from '../buttons/googleAuth3'\nimport GoogleAuth4 from '../buttons/googleAuth4'\nimport GoogleAuth5 from '../buttons/googleAuth5'\n\n\n\nconst validationSchema = yup.object({\n    email: yup.string().email('Por favor introduce una dirección de correo válida').required('hola, no te olvídes de colocar tu correo electrónico'),\n    pin: yup.string().min(4).max(4).required('No te olvides de colocar tu PIN de seguridad'),   \n})\n\n\nconst LoginForm = ({ \n    // handlingLoginUser,\n    regView, \n    toggleRegView,\n    handlingSubmitUser,\n    forgotPIN,\n    handlingNewPINRequest,\n    language,\n    isSignedIn,\n    googleTest,\n    toggleForgotPINState,\n    handlingSubmitLoginUser,\n    workingSpinner\n}) => {\n    // console.log(isSignedIn)\n    const [typeOfPIN, setTypeOfPIN ] = useState(false)\n    \n    const onSubmit = async(values) => {\n        handlingSubmitLoginUser(values)\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            pin: \"\"\n        },\n        validateOnBlur: true,\n        onSubmit,\n        validationSchema: validationSchema\n\n    })\n\n    // console.log(formik.errors)\n\n    const togglingPINVisibility = () => {\n        setTypeOfPIN(!typeOfPIN)\n    }\n\n    if (regView){\n        return(\n            <RegisterForm \n            handlingSubmitUser={handlingSubmitUser}\n            language={language}\n            isSignedIn={isSignedIn}\n            workingSpinner={workingSpinner}\n            />\n        )\n    }\n\n    if (forgotPIN){\n        return(\n            <ForgotPINForm\n            handlingNewPINRequest={handlingNewPINRequest}\n            language={language}\n            toggleForgotPINState={toggleForgotPINState}\n            />\n        ) \n        \n    }\n\n    return (\n        <div className=\"boxContainer\">\n            <form \n            onSubmit={formik.handleSubmit}\n            className=\"formContainer\">\n                \n                <input\n                className=\"input\"\n                autoComplete=\"on\"\n                name=\"email\"\n                placeholder={language === 'ES' ? infoContact.loginFormPH1 : infoContact.loginFormPH1_EN} \n                type=\"email\" \n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                style={{\n                    borderBottom: `${formik.touched.email && formik.errors.email ? '2px solid red' : '1px solid rgba(200,200,200, 0.3 )'}`\n                }}\n                />\n                <div className=\"inputWrapper\">\n                <input\n                className=\"inputPassword\"\n                name=\"pin\"\n                autoComplete=\"on\"\n                placeholder={language === 'ES' ? infoContact.loginFormPH2 : infoContact.loginFormPH2_EN} \n                type={!typeOfPIN ? 'password' : 'text'} \n                value={formik.values.pin}\n                onChange={formik.handleChange}                \n                onBlur={formik.handleBlur}\n                style={{\n                    borderBottom: `${formik.touched.city && formik.errors.city ? '2px solid red' : '1px solid rgba(200,200,200, 0.3 )'}`\n                }}\n                />\n                    <div className=\"eyeWrapper\">\n                        <MdOutlineVisibility\n                        onClick={togglingPINVisibility}\n                        className=\"eyeIcon\"\n                        />\n                    </div>\n                \n                </div>\n                \n                \n                <button\n                className=\"sendDataBtn\"\n                type=\"submit\"\n                >{language === 'ES' ? infoContact.loginFormSendBtn : infoContact.loginFormSendBtn_EN}</button>\n                <button\n                onClick={toggleRegView}\n                className=\"regButton\"\n                type=\"submit\"\n                >{language === 'ES' ? infoContact.loginFormRegBtn : infoContact.loginFormRegBtn_EN}</button>\n                <span\n                onClick={toggleForgotPINState} \n                className=\"forgotPINSpan\">{language === 'ES' ? infoContact.loginFormSpan : infoContact.loginFormSpan_EN}</span>\n                <GoogleAuth5\n                isSignedIn={isSignedIn}\n                googleTest={googleTest}\n                language={language}\n                />\n            </form>\n\n        </div>\n    )\n}\n\nexport default LoginForm"]},"metadata":{},"sourceType":"module"}