{"ast":null,"code":"var _jsxFileName = \"/Users/p3rolix/code/landingSh3ckFE/src/components/buttons/googleAuth3.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import '../../bookface.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GoogleAuth3 = ({\n  isSignedIn,\n  googleTest\n}) => {\n  _s();\n\n  let auth;\n  useEffect(() => {\n    window.gapi.load('signin2', () => {\n      const params = {\n        onsuccess: user => {\n          console.log('Google test must be executed...');\n          googleTest(user);\n        },\n        'theme': 'dark',\n        'width': 455,\n        'height': 85\n      };\n      window.gapi.signin2.render('loginButton', params);\n    });\n  }, []);\n\n  if (isSignedIn === null) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Checking if you are signed in...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"googleAuthContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loginButton\",\n        children: \"Sign In with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false); // return isSignedIn ? <h1>You are logged in</h1> : <h1>You are NOT logged in</h1>\n};\n\n_s(GoogleAuth3, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = GoogleAuth3;\nexport default GoogleAuth3;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleAuth3\");","map":{"version":3,"sources":["/Users/p3rolix/code/landingSh3ckFE/src/components/buttons/googleAuth3.js"],"names":["React","useState","useEffect","GoogleAuth3","isSignedIn","googleTest","auth","window","gapi","load","params","onsuccess","user","console","log","signin2","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AAAA;;AAC9C,MAAIC,IAAJ;AAEAJ,EAAAA,SAAS,CAAC,MAAK;AACXK,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,SAAjB,EAA4B,MAAM;AAC9B,YAAMC,MAAM,GAAG;AACXC,QAAAA,SAAS,EAAGC,IAAD,IAAU;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAT,UAAAA,UAAU,CAACO,IAAD,CAAV;AACH,SAJU;AAKX,iBAAS,MALE;AAMX,iBAAS,GANE;AAOX,kBAAU;AAPC,OAAf;AASAL,MAAAA,MAAM,CAACC,IAAP,CAAYO,OAAZ,CAAoBC,MAApB,CAA2B,aAA3B,EAA0CN,MAA1C;AACD,KAXH;AAYH,GAbQ,EAaP,EAbO,CAAT;;AAeA,MAAIN,UAAU,KAAK,IAAnB,EAAwB;AACtB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAED,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,6BACI;AACA,QAAA,EAAE,EAAC,aADH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ,CAxB8C,CAmC9C;AAEH,CArCD;;GAAMD,W;;KAAAA,W;AAuCN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import '../../bookface.css'\n\nconst GoogleAuth3 = ({isSignedIn, googleTest}) => {\n    let auth\n    \n    useEffect(()=> {\n        window.gapi.load('signin2', () => {\n            const params = {\n                onsuccess: (user) => {\n                    console.log('Google test must be executed...')\n                    googleTest(user)\n                },\n                'theme': 'dark',\n                'width': 455,\n                'height': 85,\n            }\n            window.gapi.signin2.render('loginButton', params )\n          })\n    },[])\n   \n    if (isSignedIn === null){\n      return(\n        <h1>Checking if you are signed in...</h1>\n      )\n    }\n\n    return (\n        <>\n        <div className=\"googleAuthContainer\">\n            <div\n            id=\"loginButton\"\n            >Sign In with Google</div>\n        </div>    \n        \n        </>\n    )\n    \n    // return isSignedIn ? <h1>You are logged in</h1> : <h1>You are NOT logged in</h1>\n  \n}\n\nexport default GoogleAuth3"]},"metadata":{},"sourceType":"module"}